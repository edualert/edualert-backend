# Generated by Django 3.0.4 on 2020-06-18 08:54
import datetime
from calendar import monthrange

import django.contrib.postgres.fields.jsonb
from dateutil.relativedelta import relativedelta
from django.db import migrations
from django.utils import timezone

from edualert.common.constants import WEEKDAYS_MAP


def create_student_at_risk_counts(apps, schema_editor):
    today = timezone.now().date()
    StudentAtRiskCounts = apps.get_model('statistics', 'StudentAtRiskCounts')
    RegisteredSchoolUnit = apps.get_model('schools', 'RegisteredSchoolUnit')
    AcademicYearCalendar = apps.get_model('academic_calendars', 'AcademicYearCalendar')
    current_calendar = AcademicYearCalendar.objects.last()
    if not current_calendar:
        return

    months_since_academic_year_start = []
    date = current_calendar.first_semester.starts_at
    while date <= today:
        months_since_academic_year_start.append((date.year, date.month))
        date += relativedelta(months=1)

    for year, month in months_since_academic_year_start:
        days_in_month = monthrange(year, month)[1]
        if not StudentAtRiskCounts.objects.filter(month=month, year=year, by_country=True).exists():
            StudentAtRiskCounts.objects.create(
                month=month,
                year=year,
                by_country=True,
                daily_counts=[
                    {
                        'count': 0,
                        'day': day,
                        'weekday': WEEKDAYS_MAP[datetime.datetime(year, month, day).weekday()]
                    } for day in range(1, days_in_month + 1)
                ]
            )
        for school_unit in RegisteredSchoolUnit.objects.all():
            if not StudentAtRiskCounts.objects.filter(month=month, year=year, school_unit=school_unit).exists():
                StudentAtRiskCounts.objects.create(
                    month=month,
                    year=year,
                    school_unit=school_unit,
                    daily_counts=[
                        {
                            'count': 0,
                            'day': day,
                            'weekday': WEEKDAYS_MAP[datetime.datetime(year, month, day).weekday()]
                        } for day in range(1, days_in_month + 1)
                    ]
                )
            for study_class in school_unit.study_classes.filter(academic_year=current_calendar.academic_year):
                if not StudentAtRiskCounts.objects.filter(month=month, year=year, study_class=study_class).exists():
                    StudentAtRiskCounts.objects.create(
                        month=month,
                        year=year,
                        study_class=study_class,
                        daily_counts=[
                            {
                                'count': 0,
                                'day': day,
                                'weekday': WEEKDAYS_MAP[datetime.datetime(year, month, day).weekday()]
                            } for day in range(1, days_in_month + 1)
                        ]
                    )


class Migration(migrations.Migration):

    dependencies = [
        ('statistics', '0004_auto_20200617_1014'),
    ]

    operations = [
        migrations.AlterField(
            model_name='studentatriskcounts',
            name='daily_counts',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=list),
        ),
        migrations.RunPython(code=create_student_at_risk_counts, reverse_code=migrations.RunPython.noop)
    ]
